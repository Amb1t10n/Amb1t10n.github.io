{"meta":{"title":"amb1t10n's blog","subtitle":"","description":"","author":"amb1t10n","url":"http://amb1t10n.github.io","root":"/"},"pages":[{"title":"关于自己","date":"2020-01-15T03:08:28.000Z","updated":"2020-01-15T03:47:03.582Z","comments":true,"path":"about/index.html","permalink":"http://amb1t10n.github.io/about/index.html","excerpt":"","text":"谈谈写博客的想法作为一个以后要靠技术吃饭的清(you)纯(ni)少(da)年(shu)有一个自己的blog是有必要的而且在成长的过程中对身边的一些事情有一些看法自己也不想去发到QQ空间这种地方让公开评论就想着发到blog中算是发泄一下自己的小情绪吧"},{"title":"Categories","date":"2020-03-01T11:16:25.000Z","updated":"2020-03-01T11:17:02.398Z","comments":true,"path":"category/index.html","permalink":"http://amb1t10n.github.io/category/index.html","excerpt":"","text":""},{"title":"Tags","date":"2020-03-01T11:16:12.000Z","updated":"2020-03-01T11:17:05.592Z","comments":true,"path":"tag/index.html","permalink":"http://amb1t10n.github.io/tag/index.html","excerpt":"","text":""}],"posts":[{"title":"Note of Discrete Mathematics and Its Applications","slug":"page","date":"2020-03-01T08:00:48.000Z","updated":"2020-03-02T07:58:48.914Z","comments":true,"path":"2020/03/01/page/","link":"","permalink":"http://amb1t10n.github.io/2020/03/01/page/","excerpt":"","text":"Chapter 11.1 propositional logical命题逻辑Proposition【Definition】：A proposition is a declarative sentence that is either true or false, but not both.例如： 1+1=2 华盛顿特区是美利坚合众国的首都are True propositions 2+3=1is false proposition Notice：The assert The statement is false proposition is not a proposition.Because no matter what the truth value is,there is a contradition. 1.2 Logical operators1 Negation(NOT)$\\lnot$【Definition】Let $p$ be a proposition.The negation of p,$\\lnot p$ is the proposition”It is not the case that $p$”Example: $p$:Michael’s PC runs Linux$\\lnot p$:Michael’s PC does not run Linux 2. Conjunction(AND)$\\bigwedge$（和取）【Definition】:Let $p$ and q be propositions. The conjunction of $p$ and $q$, denoted by $p \\bigwedge q$, is the proposition“$p$ and $q$.” The conjunction $p \\bigwedge q$ is true when both $p$ and $q$ are true and is false otherwise.Example :I have an apple and a pencil. 3. Disjunction(OR)$\\bigvee$（析取）【Definition】Let $p$ and $q$ be propositions. The disjunction of $p$ and $q$, denoted by $p \\bigvee q$, is the proposition“$p$ or $q$.” The disjunction $p \\bigvee q$ is false when both $p$ and $q$ are false and is true otherwise. 4. Exclusive or(XOR)$\\bigoplus$（异或）【Definition】:$p \\bigoplus q$ is $p$ or $q$ but not both. 5. Conditional(IF–THEN)$\\rightarrow$【Definition】The conditional statement $p \\rightarrow q$ is the proposition “if $p$, then $q$.”$p \\rightarrow q$ can be exprssed as: 6. Biconditional(IF AND ONLY IF)$\\longleftrightarrow$【Definition】:Let $p$ and $q$ be propositions. The biconditional statement $p \\leftrightarrow q$, is the proposition “$p$ if and only if (iff) $q$.”$p \\longleftrightarrow q$ can be exprssed as: 7.Precedence of Logical Operators operator precedence $\\lnot$ 1 $\\bigwedge$ 2 $\\bigvee$ 3 $\\rightarrow$ 4 $\\leftrightarrow$ 5 8.Truth table $x$ $y$ $\\lnot x$ $x \\bigwedge y$ $x \\bigvee y$ $x \\bigoplus y$ $x \\leftarrow y$ $x \\leftrightarrow y$ T T F T T F T T F T T F T T T F T F F F T T F T F F T F F F T T Translating English sentencesExample:Translate You can access the Internet from campus only if you are a computer science major or you are not a freshmanSolution:Let $a$:you can access the Internet from campus$c$:you are a computer science major$f$:you are a freshmanThis sentence can be represented as $a \\rightarrow (c \\bigvee \\lnot f)$ 1.3 Logical Equivalences【Definition】:The compound propositions p and q are called logically equivalent if $p \\leftrightarrow$ is a tautology.Notation:$p \\equiv q$ or $p \\Leftrightarrow q$NOR:The proposition p NOR q is true when both p and q are false, and it is false otherwise. The operator $\\downarrow$ is called Peirce arrow. 1.4 Predicates and Quantifiers1.5 Nested quantifiersnested quantifiersA statement can have multiple variables【Definition】:Two quantifiers are nested if one is within the scope of the other.Example:Let C(x,y)denote “x has taken course y”where the domain of x and y consist of all ZJU students and all CS courses.$\\forall x \\exists y C(x,y)$ :Every student at ZJU has taken some CS course.$\\exists x \\forall y C(x,y)$ :Some student at ZJU has taken all CS courses.Translate: Translate the statement $\\forall x(C(x) \\bigvee \\exists y(C(x) \\bigwedge F(x,y)))$into English,where $C(x)$ is “x has a computer,”$F(x)$is “x and y are friends”and the domain for both x and y consists of all students at ZJU.Solution::Every student at ZJU has a computer or has a friend who has a computer. Express the statement “Everyone has exactly one best friend” as a logical expression with a domain consisting of all people.Solution:”For every person x,x has exactly one best friend”$\\Rightarrow$”There is a person y who is the best friend of x,and furthermore,that for every person z,if z is not y,then z is not the best friend of x.”Let $B(x,y)$ be the statement “y is the best friend of x” $\\forall x \\exists y \\forall z (B(x,y) \\bigwedge ((z \\neq y)\\rightarrow \\lnot B(x,z)))$ The order of quantifiersthe order of nested quantifiers matters if quantifiers are different types: $\\forall x \\forall y \\equiv \\forall y \\forall x$ $\\exists x \\forall yP(x,y) \\neq \\forall y \\exists x P(x,y)$ Negating Nested quantifersNegating nested quantifiers by successively applying the rules for negating statements involving a single quantifier.Example: Express the negation of the statement $\\forall x \\exists y (xy=1)$ so that no negation precedes a quantifiers.Solution:$\\lnot \\forall x \\exists y (xy=1) \\\\equiv \\exists x(\\lnot \\exists (xy=1)) \\\\equiv \\exists x \\forall y (\\lnot (xy=1)) \\\\equiv \\exists x \\forall y (xy \\neq 1)$ Propositional Normal FormsLiteral:$p$ $or$ $\\lnot p$【Definition】:Disjunctions(conjunctions) with literals as disjuncts are calles is djunctions(conjunctions) clauses.Disjunctive and conjunctive clauses are simply called clauses.Examples: $q \\lor r$ &emsp; Disjunctive clause $\\lnot q \\land p$ &emsp; Conjunctive clause $p \\land q \\lor r$ &emsp; Not a clauseConjunctive Normal Form(CNF) 【Definition】 A conjunction with disjunctive clauses as its conjuncts is said to be in conjunctive normal form.Examples: $p \\land (q \\lor r)$ &emsp; T $\\lnot q \\land p$ &emsp; T $p \\land ((p \\land q) \\lor r$&emsp;F Disjunctive Normal Form(DNF) 【Definition】A disjunction with conjunctive clauses as its disjuncts is said to be in disjunctive normal form.Examples: $(p \\land q)\\lor (p \\land \\lnot q)$ &emsp; T $\\lnot(p \\land q) \\lor r$ &emsp; F how to obtain Normal FormsUse logical Equivalences. Examples $\\lnot ((p \\lor q) \\land \\lnot r) \\Leftrightarrow \\lnot (p \\lor \\lnot q) \\lor r \\Leftrightarrow (\\lnot p \\land q) \\lor r \\Leftrightarrow (\\lnot p \\lor r) \\land (q\\lor r)$ Full Disjunctive Normal Forms【Definition】A minterm is a conjunction of literals in which each variable is represented exactly once.【Definition】If a formula is expressed as a disjunction of minterms, it is said to be in full disjunctive normal form.Example : $(p \\land q \\land r) \\lor (p \\land q \\land \\lnot r) \\lor (\\lnot p \\land q \\land r) \\lor (\\lnot p \\land \\lnot q \\land \\lnot r)$ Prenex Normal Form【Definition】A statement is in prenex normal form iff it is of the form $Q_1x_1…Q_nx_n B$,where $Q_i (i=1,2…n)$ is $\\land $ or $\\lor$ and the predicate B is quantifier free.Examples: $\\land xP(x) \\lor \\land xQ(x)$ F $\\land x \\land y \\lnot (P(x) \\rightarrow Q(y))$ T Transforming to Prenex NOrmal Form1.6 Rules of InferenceValid Arguments 【Definition】 An argument in propositional logic is a sequence of propositions.All but the final proposition in the argument are called premises and the final proposition is called the conclusion.An argument is valid if the truth of all its premises implies that the conclusion is true.An argument form in propositional logic is a sequence of compound propositions involving propositional variables.An argument form is valid if no matter which particular propositions are substituted for the propositional variables in its premises, the conclusion is true if the premises are all true.Examples: “If you have a current password, then you can log onto the network”（premises） “You have a current password”（premises） “You can log onto the network”（conlusion） $((p \\rightarrow q)\\land p)\\rightarrow q$ Rules of Inference","categories":[{"name":"note","slug":"note","permalink":"http://amb1t10n.github.io/categories/note/"}],"tags":[{"name":"study","slug":"study","permalink":"http://amb1t10n.github.io/tags/study/"}]},{"title":"C语言指针","slug":"my-annual-summary","date":"2020-01-14T01:58:48.000Z","updated":"2020-01-23T08:33:14.592Z","comments":true,"path":"2020/01/14/my-annual-summary/","link":"","permalink":"http://amb1t10n.github.io/2020/01/14/my-annual-summary/","excerpt":"","text":"对于很多人来说，指针这块东西确实让人难懂但是他的名字很形象地表现他的性质他就是一个指向某块数据的类型，就类似于一种快捷方式你可以用指针迅速访问你要代表的那个变量利用指针对原来那个变量做出各种操作 指针类型指针也是一种数据类型，他的值是一串16进制的数，表示的是地址，也就是在内存中，所代表的数据的位置，定义指针的时候也是那几种比如char*、int*、double*等等，也可以是指向指针的指针，比如 int** ，指向指针的指针的指针的……套娃。但是他比常用的数据类型还多了一种void*也就是可以指向任何类型的指针但是这并不代表ElementType*是一种类型，*只是一种标记，在哪个变量前面就代表哪个就是指针，并没有int *这种类型。 指针的定义指针定义的时候，是通过*来区别是指针还是普通的变量。使用时通过 * 来访问所代表的变量的值 int *p,q;在这句中，只有p是指针，而q是普通的int型的变量int中存储的变量是整数，double中是双精度浮点数，那么指针呢？指针中存储的是地址，所以赋值的时候，是用&amp;取址来赋值 #include &lt;stdio.h&gt; int main(){ int n=5; int *a=&amp;n; int *p=0; int *q=2; printf(&quot;%x %p\\n&quot;,a,&amp;n); printf(&quot;%d %d&quot;,n,*a); return 0; }上图即为此段代码的运行结果我们不难发现，a的值是和n的地址是一样的，并且n和*a的值也相同。所以在定义的时候可以将一个指针的值赋值给另一个就比如int *new=a,在此时，a中的地址赋值给new, new就也指向了n在这块代码中，定义了一个指针 a ，并且对a进行赋值，也就是n的地址，&amp;在这则是取址符号，即取出n的地址，使得a指向n在下一行的printf中，由于*在a前，把a指向的变量取出，所以两个值是相同的但是int *p=0;与int *q=2这两句，将整数赋给指针，那么在这的整数，就是一句无报错一句有报错，这是怎样一回事呢？在这两句中，0 2都被当作是地址，但0可以理解为一种特殊的地址，对指针进行初始化的时候常常用到0或者是NULL，此二者是相同的，在指针定义后没有被初始化时，我们不知道它指向何处，所以称它为“野指针”，所以赋值0是不会有“王宁”的，但是2的地址是一个不可写的位置所以在这句中会有warning 指针的应用众所周知（学了C的人都知道），C的函数中，return只能返回一个值，而想要在函数中返回两个值甚至多个值，就需要通过函数传入所要改变的值的地址，在函数内部进行操作，从而改变函数外这个变量的值，进而达到返回多个值的目的 #include &lt;stdio.h&gt; int find(int a,int b,int *min); int main(){ int a=5,b=6; int max,min; max=find(a,b,&amp;min); printf(&quot;%d %d&quot;,max,min); return 0; } int find(int a,int b,int *min){ return a&gt;b?(*min=b,a):(*min=a,b); }我们通过这样的一个函数来找出两个数中的最大值和最小值，当然不可否认的是，这样做确实比较蠢，但是个人觉得这是一个很好的例子，来说明通过指针来返回多个数据。在后期甚至会遇到需要将一个链表拆分成两个链表，并且在main函数中输出，此时则需要函数返回一个，再对原来的链表操作从而达到返回两个链表的目的还有我们想要通过函数去交换两个数的值，比如这样 void swap(int a,int b){ int temp=a; a=b; b=temp; }指针与数组数组是在内存中一连串的数据空间，通过[]来访问对应位置上的元素，指针则是指向空间中某个位置。在c89的时候，不能用未知量来定义数组，int a[n]这种行为是非法的，而在那个时候就是用 int *a=malloc(sizeof(int)*n);可以使用这样的方式来申请一块连续的内存空间，从而达到存储的目的。在函数中，传入数组时，数组会退化成指针，而数组的头就是a[0]的地址，即a==&amp;a[0]或者*a==a[0]此时的a是int的一维数组，当a是int的二维数组时，a就变成了一个int **a，也就是指向指针的指针。而字符串数组比较特殊。","categories":[],"tags":[{"name":"study","slug":"study","permalink":"http://amb1t10n.github.io/tags/study/"}]}]}